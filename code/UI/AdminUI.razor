@using Mbk.Admin.UI.Utils;
@using Mbk.Admin.UI.Dialog;
@using Sandbox;
@using Sandbox.UI;
@using System;
@using System.Linq;
@using System.Collections.Generic;

@inherits NavigatorPanel
@attribute [StyleSheet]
@namespace Mbk.Admin.UI

<root>
    <div class="container">
        <DialogLayout></DialogLayout>
        <div class="wrapper"></div>
        <div class="sidenav">
            <div class="header">
                <svg src="assets/images/logo.svg" color="white"/>
                <h1>Admin</h1>
                <button>
                    <i @onclick=@(()=> IsExpanded = !IsExpanded) tooltip="@(IsExpanded ? "Close" : "Expand")">@(IsExpanded ? "chevron_left" : "chevron_right")</i>
                </button>
            </div>
            <div class="navs">
                <a href="/admin/home">
                    <iconify icon="fluent:home-48-regular" />
                    <span>Home</span>
                    <div class="activebadge"></div>
                </a>

                <a href="/admin/settings" tooltip="settings">
                    <iconify icon="fluent:settings-48-regular" />
                    <span>Settings</span>
                    <div class="activebadge"></div>
                </a>

                <a href="/admin/players">
                    <iconify icon="fluent:contact-card-group-48-regular" />
                    <span>Players</span>
                    <div class="activebadge"></div>
                </a>

                <a href="/admin/bans">
                    <iconify icon="fluent:block-24-regular" />
                    <span>Bans</span>
                    <div class="activebadge"></div>
                </a>

                <a href="/admin/commands">
                    <iconify icon="fluent:fast-acceleration-24-regular" />
                    <span>Commands</span>
                    <div class="activebadge"></div>
                </a>

                <a href="/admin/roles">
                    <iconify icon="fluent:shield-lock-48-regular" />
                    <span>Roles</span>
                    <div class="activebadge"></div>
                </a>

                <a href="/admin/permissions">
                    <iconify icon="fluent:puzzle-piece-shield-20-regular" />
                    <span>Permissions</span>
                    <div class="activebadge"></div>
                </a>

                @foreach (var item in Pages)
                {
                    <a href=@item.HRef>
                        <iconify icon=@item.Icon />
                        <span>@item.PageName</span>
                        <div class="activebadge"></div>
                    </a>
                }
            </div>
        </div>
        <div class="content" slot="navigator-canvas"></div>
        <button class="close">
            <i @onclick=@(()=> Close()) tooltip="Close">close</i>
        </button>
    </div>
</root>

@code {
    public bool IsOpen = false;
    public bool IsExpanded = false;
    public static AdminUI Instance { get; private set; }
    public List<IAdminPage> Pages { get; set; } = new();

    public AdminUI()
    {
        Instance = this;
        DefaultUrl = "/admin/home";

        foreach (var type in TypeLibrary.GetTypes().Where(x => (x.IsClass)))
        {
            if (type.Interfaces.Count(x => x.Name == "IAdminPage") > 0)
            {
                var page = (IAdminPage)TypeLibrary.Create(type.TargetType.Name, type.TargetType);
                Pages.Add(page);
            }
        }
    }

    void Close()
    {
        IsOpen = false;
        SetClass("open", false);
    }

    public void Toggle()
    {
        if(Game.LocalClient.GetRoles().Count == 0)
        {
            Alert.Alert.Add(To.Single(Game.LocalClient), new()
            {
                Title = "No Access",
                Message = "You have no access to the admin menu",
                Type = Alert.eAlertType.Error
            });
        }

        IsOpen = !IsOpen;
        SetClass("open", IsOpen);
    }

    public override void Tick()
    {
        SetClass("expanded", IsExpanded);

        base.Tick();
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(DateTime.Now.ToString());
    }
}
