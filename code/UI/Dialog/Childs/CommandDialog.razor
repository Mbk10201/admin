@using Sandbox.UI;
@using Sandbox;
@using TaigaUI.Core.Components;
@using System.Collections.Generic;

@inherits Panel
@implements IDialog
@attribute [StyleSheet]
@namespace Mbk.Admin.UI.Dialog.Childs

<root>
    <span class="title">@TargetCommand.Name</span>
    <span>Target: @Player.Name</span>
    <panel @ref="BodyPanel" class="dialogbody">
        @*@foreach (var param in TargetCommand.Params)
        {
            <p>@param.Key - @param.Value</p>
        }*@
    </panel>
    <div class="dialogfooter">
        <button class="submit @(CanBeRun() == false ? "disabled" : "")" onclick=@(()=> Submit())>Submit</button>
    </div>
    <button class="close">
        <i @onclick=@(()=> Delete()) tooltip="Close">close</i>
    </button>
</root>

@code {
    public IClient Player { get; set; }
    public Command TargetCommand { get; set; }
    public Panel BodyPanel { get; set; }
    public Dictionary<string, object> PropertiesValues { get; set; } = new();
    public Dictionary<string, Panel> PropertiesPanels { get; set; } = new();

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if( firstTime )
        {
            foreach (var param in TargetCommand.Params)
            {
                switch(param.Value)
                {
                    case "Int16":
                    case "Int32":
                    case "Int64":
                        {
                            PropertiesValues.Add(param.Key, (param.Key == "steamid" ? Player.SteamId : null));

                            Panel panel = new Panel(BodyPanel);
                            panel.AddClass("property");

                            var label = panel.AddChild<Label>();
                            label.Text = param.Key;

                            TextEntry numberentry = panel.AddChild<TextEntry>();
                            numberentry.Numeric = true;
                            numberentry.OnTextEdited = (string value) =>
                            {
                                PropertiesValues[param.Key] = value.ToInt();
                            };

                            PropertiesPanels.Add(param.Key, numberentry);

                            break;
                        }
                    case "String":
                        {
                            PropertiesValues.Add(param.Key, null);

                            Panel panel = new Panel(BodyPanel);
                            panel.AddClass("property");

                            var label = panel.AddChild<Label>();
                            label.Text = param.Key;

                            TextEntry textentry = panel.AddChild<TextEntry>();
                            textentry.OnTextEdited = (string value) => 
                            {
                                PropertiesValues[param.Key] = value;
                            };

                            PropertiesPanels.Add(param.Key, textentry);

                            break;
                        }
                    case "Float":
                        {
                            PropertiesValues.Add(param.Key, null);

                            Panel panel = new Panel(BodyPanel);
                            panel.AddClass("property");

                            var label = panel.AddChild<Label>();
                            label.Text = param.Key;

                            TextEntry floatentry = panel.AddChild<TextEntry>();
                            floatentry.OnTextEdited = (string value) => 
                            {
                                float floating = value.ToFloat();

                                PropertiesValues[param.Key] = (floating != 0f ? floating : 0f);
                            };

                            PropertiesPanels.Add(param.Key, floatentry);

                            break;
                        }
                    case "Boolean":
                        {
                            PropertiesValues.Add(param.Key, null);

                            Panel panel = new Panel(BodyPanel);
                            panel.AddClass("property");

                            var label = panel.AddChild<Label>();
                            label.Text = param.Key;

                            TuiCheckbox checkbox = panel.AddChild<TuiCheckbox>();
                            checkbox.OnUpdate = (bool value) =>
                            {
                                PropertiesValues[param.Key] = value;
                            };

                            PropertiesPanels.Add(param.Key, checkbox);
                            break;
                        }
                }
            }
        }
    }

    bool CanBeRun()
    {
        int count = 0;

        foreach (var property in PropertiesValues)
        {
            if (property.Value == null)
                count++;
        }

        return count == 0;
    }

    void Submit()
    {
        if (CanBeRun())
            Command.Run(TargetCommand.Name);
        else
        {
            Log.Info("Please fill all the params before executing the command.");
        }
    }
}
